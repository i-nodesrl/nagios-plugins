#!/bin/bash
#
# check_ro_mounts
# Nagios plugin to check if are there mountpoints in RO mode
#
# Version: 2018-11-06H11:54:41
#
# Copyright (C) 2017 Davide Pucci <d.pucci@i-node.it> for I-Node S.r.l.
#
# This program is free software: you can redistribute it and/or modify it under the terms
# of the GNU General Public License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this program.
# If not, see http://www.gnu.org/licenses/.

# auxiliary functions

function help()		{ echo -e "Usage:\n\t$(basename $0) [-x </to/exclude/mount/point> -x </to/exclude/device>]"; exit 0; }
function ok()		{ echo "OK: $1"; exit 0; }
function warning()	{ echo "WARNING: $1"; exit 1; }
function critical()	{ echo "CRITICAL: $1"; exit 2; }
function unknown()	{ echo "UNKNOWN: $1"; exit 3; }

# shell setup

shopt -s expand_aliases

# arguments parsing

while [[ $# -gt 0 ]]; do
	case "$1" in
		-h|--help)
			help
			;;
		-x|--exclude)
			EXCLUDE_PATTERNS="${EXCLUDE_PATTERNS} $2"
			;;
	esac
	shift
done

# arguments validation

# effective script

while read -r mount_entry; do
	unset mount_ignore
	mount_dev="$(echo "${mount_entry}" | awk '{ print $1 }')"
	mount_point="$(echo "${mount_entry}" | awk '{ print $2 }')"
	mount_opts=",$(echo "${mount_entry}" | awk '{ print $4 }'),"

	if [[ ${mount_opts} == *",ro,"* ]]; then
		for exclude_pattern in ${EXCLUDE_PATTERNS}; do
			if [[ ${mount_dev} == *"${exclude_pattern}"* ]] || [[ ${mount_point} == *"${exclude_pattern}"* ]]; then
				mount_ignore=1
				break
			fi
		done
		if [ ! -z ${mount_ignore} ]; then
			continue
		fi
		mounts_ro="${mounts_ro} ${mount_point}"
	fi
done < /proc/mounts

if [ ! -z "${mounts_ro}" ]; then
	critical "RO mounts found: $(echo "${mounts_ro}" | xargs)"
fi

ok "no RO mounts found"
